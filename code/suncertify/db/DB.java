/*
 * DB.java		
 * 
 * Copyright (c) 2011, Pedro Oliveira. All Rights Reserved.
 */

package suncertify.db;


/**
 * An interface implemented by classes that provide access to the general 
 * records database. <p>
 * 
 * <b>Note:</b> This interface was provided by <tt>Sun</tt>.
 * 
 * @author Pedro Oliveira
 * @version 1.0
 */
public interface DB {
	
    /**
     * Reads a record from the file. Returns an array where each
     * element is a record value.
     * 
     * @param recNo the record number to retrieve from the database.
     * @return a {@code String} array containing all of the elements 
     * for the given <code>recNo</code> 
     * @throws RecordNotFoundException if the specified record 
     * number does not exist in the database.
     */
    public String[] read(int recNo) throws RecordNotFoundException;

    /**
     * Modifies the fields of a record. The new value for field n
     * appears in data[n].
     * 
     * @param recNo the record number to update in the database.
     * @param data a {@code String} array with the new data of the given
     * record. 
     * @param lockCookie cookie value trying to get access to the record. 
     * @throws RecordNotFoundException if the specified record 
     * number does not exist in the database. 
     * @throws SecurityException if {@code lockCookie} is not the cookie value
     * that holds the lock for the given record number.
     */
    public void update(int recNo, String[] data, long lockCookie)
    		throws RecordNotFoundException, SecurityException;

    /**
     * Deletes a record, making the record number and associated disk
     * storage available for reuse. 
     * 
     * @param recNo the record number to delete in the database.
     * @param lockCookie cookie value trying to get access to the record. 
     * @throws RecordNotFoundException if the specified record 
     * number does not exist in the database. 
     * @throws SecurityException if {@code lockCookie} is not the cookie value
     * that holds the lock for the given record number.
     */
    public void delete(int recNo, long lockCookie)
    		throws RecordNotFoundException, SecurityException;

    /**
     * Returns an array of record numbers that match the specified
     * criteria. Field n in the database file is described by
     * criteria[n]. <p>
     * 
     * A null value in criteria[n] matches any field value. A non-null
     * value in criteria[n] matches any field value that begins with 
     * criteria[n]. (For example, "Fred" matches "Fred" or "Freddy".)
     * 
     * @param criteria a array of strings with the patterns that must be
     * matched in the search performed.
     * @return an array of integers with the record numbers that match the
     * specified criteria.
     */
    public int[] find(String[] criteria);

    /**
     * Creates a new record in the database (reusing a
     * deleted entry if one exists). Inserts the given data, and returns
     * the record number of the new record.
     * 
     * @param data a {@code String} array with the data to set for the 
     * new record. 
     * @return the record number of the newly created record.
     * @throws DuplicateKeyException if the data given violates the primary 
     * key constraint of the database.
     */
    public int create(String[] data) throws DuplicateKeyException;

    /**
     * Locks a record so that it can only be updated or deleted by this 
     * client. Returned value is a cookie that must be used when the record
     * is unlocked, updated, or deleted. If the specified record is already 
     * locked by a different client, the current thread gives up the CPU and
     * consumes no CPU cycles until the record is unlocked.
     * 
     * @param recNo the record number to lock in the database.
     * @return the cookie value generated by the locking mechanism.
     * @throws RecordNotFoundException if the specified record 
     * number does not exist in the database. 
     */	 	 	 	
    public long lock(int recNo) throws RecordNotFoundException;

    /**
     * Releases the lock on a record. Cookie must be the cookie
     * returned when the record was locked; otherwise throws SecurityException.
     * 
     * @param recNo the record number to unlock in the database.
     * @param lockCookie cookie value trying to get access to the record.
     * @throws RecordNotFoundException if the specified record 
     * number does not exist in the database. 
     * @throws SecurityException if {@code lockCookie} is not the cookie value
     * that holds the lock for the given record number.
     */
    public void unlock(int recNo, long lockCookie)
    		throws RecordNotFoundException, SecurityException;
}